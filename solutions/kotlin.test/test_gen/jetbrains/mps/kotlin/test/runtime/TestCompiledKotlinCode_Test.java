package jetbrains.mps.kotlin.test.runtime;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.jupiter.api.extension.RegisterExtension;
import jetbrains.mps.lang.test.runtime.TestParametersCacheExtension;
import jetbrains.mps.lang.test.runtime.TestParametersCache;
import org.junit.jupiter.api.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import jetbrains.mps.lang.test.runtime.TransformationTest;
import org.junit.Assert;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

@MPSLaunch
public class TestCompiledKotlinCode_Test extends BaseTransformationTest {
  @RegisterExtension
  private static final TestParametersCacheExtension ourParametersCacheExtension = new TestParametersCacheExtension(new TestParametersCache(TestCompiledKotlinCode_Test.class, "${kotlin_home}", "r:a9b87651-0c58-4ba0-89b9-8920e23771ae(jetbrains.mps.kotlin.test.runtime@tests)", false));

  public TestCompiledKotlinCode_Test() {
    super(ourParametersCacheExtension.getParametersCache());
  }

  @Test
  public void test_javaKotlinInteraction() throws Throwable {
    new TestBody(this).test_javaKotlinInteraction();
  }
  @Test
  public void test_kotlinSModel() throws Throwable {
    new TestBody(this).test_kotlinSModel();
  }

  /*package*/ static class TestBody extends BaseTestBody {

    /*package*/ TestBody(TransformationTest owner) {
      super(owner);
    }

    @Override
    protected void initTestNodes() {
      prepareTestNodes("8374658296288157314");
    }

    public void test_javaKotlinInteraction() throws Exception {
      initTestNodes();
      runWithinCommand(() -> {
        Message message = new HelloWorldMessage();
        Post post = new Post();
        post.process(message);

        Assert.assertNull(post.searchFor("Blow it up"));
        Assert.assertSame(post.searchFor(message.open()), message);
      });
    }
    public void test_kotlinSModel() throws Exception {
      initTestNodes();
      runWithinCommand(() -> {
        Assert.assertTrue(ClassHierarchyKt.hasAncestor(getAnnotatedNode("child"), SNodeOperations.getPointer(getAnnotatedNode("parent"))));
        Assert.assertFalse(ClassHierarchyKt.hasAncestor(getAnnotatedNode("other"), SNodeOperations.getPointer(getAnnotatedNode("parent"))));
      });
    }

  }
}
