package jetbrains.mps.kotlin.test.scopes;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.jupiter.api.extension.RegisterExtension;
import jetbrains.mps.lang.test.runtime.TestParametersCacheExtension;
import jetbrains.mps.lang.test.runtime.TestParametersCache;
import org.junit.jupiter.api.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import jetbrains.mps.lang.test.runtime.TransformationTest;
import jetbrains.mps.kotlin.scopes.signed.SignatureScope;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.kotlin.behavior.MemberReceiver;
import jetbrains.mps.kotlin.behavior.InstanceReceiver;
import jetbrains.mps.kotlin.behavior.ConcreteTypeReference;
import jetbrains.mps.kotlin.scopes.signed.KotlinScopes;
import jetbrains.mps.kotlin.api.members.SourcedSignature;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Objects;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.junit.Assert;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import org.jetbrains.mps.openapi.language.SInterfaceConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SReferenceLink;

@MPSLaunch
public class ReceiverScope_Test extends BaseTransformationTest {
  @RegisterExtension
  private static final TestParametersCacheExtension ourParametersCacheExtension = new TestParametersCacheExtension(new TestParametersCache(ReceiverScope_Test.class, "${kotlin_home}", "r:5496351e-6e92-4051-85ca-98be7df49c2e(jetbrains.mps.kotlin.test.scopes@tests)", false));

  public ReceiverScope_Test() {
    super(ourParametersCacheExtension.getParametersCache());
  }

  @Test
  public void test_nonReceiverPriority() throws Throwable {
    new TestBody(this).test_nonReceiverPriority();
  }
  @Test
  public void test_regularReceiver() throws Throwable {
    new TestBody(this).test_regularReceiver();
  }
  @Test
  public void test_currentHierarchyPriority() throws Throwable {
    new TestBody(this).test_currentHierarchyPriority();
  }

  /*package*/ static class TestBody extends BaseTestBody {

    /*package*/ TestBody(TransformationTest owner) {
      super(owner);
    }

    @Override
    protected void initTestNodes() {
      prepareTestNodes("7345386200886370476");
    }

    public void test_nonReceiverPriority() throws Exception {
      initTestNodes();
      runWithinCommand(() -> {
        //  
        TestBody.this.assertUniqueInScope("a", getAnnotatedNode("priorityA"));
      });
    }
    public void test_regularReceiver() throws Exception {
      initTestNodes();
      runWithinCommand(() -> TestBody.this.assertUniqueInScope("b", getAnnotatedNode("priorityB")));
    }
    public void test_currentHierarchyPriority() throws Exception {
      initTestNodes();
      runWithinCommand(() -> TestBody.this.assertUniqueInScope("c", getAnnotatedNode("priorityC")));
    }

    public SignatureScope getScope() {
      SNode var7345386200892581386 = getNodeById("7345386200892577566");
      SNode var7345386200892587755 = getNodeById("7345386200892587715");
      MemberReceiver receiver = new InstanceReceiver(new ConcreteTypeReference(createClassType_srqx7a_a0a0a0c0j8(getAnnotatedNode("classA"))));
      return KotlinScopes.create(getAnnotatedNode("object")).functions().receiver(receiver).buildSigScope();
    }
    public void assertUniqueInScope(final String name, SNode target) {
      Iterable<SourcedSignature> elements = Sequence.fromIterable(this.getScope().getElements(name)).where((it) -> Objects.equals(SPropertyOperations.getString(SNodeOperations.as(it.getSource(), CONCEPTS.IFunctionDeclaration$ZB), PROPS.name$MnvL), name));
      Assert.assertEquals(1, Sequence.fromIterable(elements).count());
      Assert.assertEquals(SNodeOperations.getPointer(target), SNodeOperations.getPointer(Sequence.fromIterable(elements).first().getSource()));
    }
    private static SNode createClassType_srqx7a_a0a0a0c0j8(SNode p0) {
      SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.ClassType$jI);
      n0.setReferenceTarget(LINKS.class$ExdX, p0);
      return n0.getResult();
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SInterfaceConcept IFunctionDeclaration$ZB = MetaAdapterFactory.getInterfaceConcept(0x6b3888c1980244d8L, 0x8baff8e6c33ed689L, 0x2a5d3409768d2f2bL, "jetbrains.mps.kotlin.structure.IFunctionDeclaration");
    /*package*/ static final SConcept ClassType$jI = MetaAdapterFactory.getConcept(0x6b3888c1980244d8L, 0x8baff8e6c33ed689L, 0x28bef6d7551af4dfL, "jetbrains.mps.kotlin.structure.ClassType");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink class$ExdX = MetaAdapterFactory.getReferenceLink(0x6b3888c1980244d8L, 0x8baff8e6c33ed689L, 0x5c7be90f2440b378L, 0x5c7be90f2440b37bL, "class");
  }
}
