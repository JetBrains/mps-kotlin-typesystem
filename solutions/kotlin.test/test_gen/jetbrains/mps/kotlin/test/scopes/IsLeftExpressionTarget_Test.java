package jetbrains.mps.kotlin.test.scopes;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.jupiter.api.extension.RegisterExtension;
import jetbrains.mps.lang.test.runtime.TestParametersCacheExtension;
import jetbrains.mps.lang.test.runtime.TestParametersCache;
import org.junit.jupiter.api.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import jetbrains.mps.lang.test.runtime.TransformationTest;
import org.junit.Assert;
import jetbrains.mps.kotlin.behavior.IStatement__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

@MPSLaunch
public class IsLeftExpressionTarget_Test extends BaseTransformationTest {
  @RegisterExtension
  private static final TestParametersCacheExtension ourParametersCacheExtension = new TestParametersCacheExtension(new TestParametersCache(IsLeftExpressionTarget_Test.class, "${kotlin_home}", "r:5496351e-6e92-4051-85ca-98be7df49c2e(jetbrains.mps.kotlin.test.scopes@tests)", false));

  public IsLeftExpressionTarget_Test() {
    super(ourParametersCacheExtension.getParametersCache());
  }

  @Test
  public void test_navigationLeftSide() throws Throwable {
    new TestBody(this).test_navigationLeftSide();
  }
  @Test
  public void test_singaloneVariable() throws Throwable {
    new TestBody(this).test_singaloneVariable();
  }
  @Test
  public void test_assignment() throws Throwable {
    new TestBody(this).test_assignment();
  }
  @Test
  public void test_rightHandSide() throws Throwable {
    new TestBody(this).test_rightHandSide();
  }

  /*package*/ static class TestBody extends BaseTestBody {

    /*package*/ TestBody(TransformationTest owner) {
      super(owner);
    }

    @Override
    protected void initTestNodes() {
      prepareTestNodes("780388659011107187");
    }

    public void test_navigationLeftSide() throws Exception {
      initTestNodes();
      runWithinCommand(() -> {
        Assert.assertFalse((boolean) IStatement__BehaviorDescriptor.isLeftExpressionTarget_id69RFwVHPwd9.invoke(getAnnotatedNode("lNav"), LINKS.operand$YS5t));
        Assert.assertFalse((boolean) IStatement__BehaviorDescriptor.isLeftExpressionTarget_id69RFwVHPwd9.invoke(getAnnotatedNode("lNav"), LINKS.target$C6zp));
        Assert.assertFalse((boolean) IStatement__BehaviorDescriptor.isLeftExpressionTarget_id69RFwVHPwd9.invoke(getAnnotatedNode("lNav"), null));
        Assert.assertFalse((boolean) IStatement__BehaviorDescriptor.isLeftExpressionTarget_id69RFwVHPwd9.invoke(getAnnotatedNode("parentNav"), LINKS.operand$YS5t));

        // Only the right most variable and its containing navigation are left hand side
        Assert.assertTrue((boolean) IStatement__BehaviorDescriptor.isLeftExpressionTarget_id69RFwVHPwd9.invoke(getAnnotatedNode("parentNav"), LINKS.target$C6zp));
        Assert.assertTrue((boolean) IStatement__BehaviorDescriptor.isLeftExpressionTarget_id69RFwVHPwd9.invoke(getAnnotatedNode("parentNav"), null));
        Assert.assertTrue((boolean) IStatement__BehaviorDescriptor.isLeftExpressionTarget_id69RFwVHPwd9.invoke(getAnnotatedNode("lVar"), null));
      });
    }
    public void test_singaloneVariable() throws Exception {
      initTestNodes();
      runWithinCommand(() -> Assert.assertTrue((boolean) IStatement__BehaviorDescriptor.isLeftExpressionTarget_id69RFwVHPwd9.invoke(getAnnotatedNode("regularVar"), null)));
    }
    public void test_assignment() throws Exception {
      initTestNodes();
      runWithinCommand(() -> {
        Assert.assertTrue((boolean) IStatement__BehaviorDescriptor.isLeftExpressionTarget_id69RFwVHPwd9.invoke(getAnnotatedNode("assign"), LINKS.left$UqF2));
        Assert.assertFalse((boolean) IStatement__BehaviorDescriptor.isLeftExpressionTarget_id69RFwVHPwd9.invoke(getAnnotatedNode("assign"), LINKS.right$Uro5));
      });
    }
    public void test_rightHandSide() throws Exception {
      initTestNodes();
      runWithinCommand(() -> {
        Assert.assertFalse((boolean) IStatement__BehaviorDescriptor.isLeftExpressionTarget_id69RFwVHPwd9.invoke(getAnnotatedNode("rNav"), LINKS.operand$YS5t));
        Assert.assertFalse((boolean) IStatement__BehaviorDescriptor.isLeftExpressionTarget_id69RFwVHPwd9.invoke(getAnnotatedNode("rNav"), LINKS.target$C6zp));
        Assert.assertFalse((boolean) IStatement__BehaviorDescriptor.isLeftExpressionTarget_id69RFwVHPwd9.invoke(getAnnotatedNode("rNav"), null));
        Assert.assertFalse((boolean) IStatement__BehaviorDescriptor.isLeftExpressionTarget_id69RFwVHPwd9.invoke(getAnnotatedNode("rVar"), null));
      });
    }

  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink operand$YS5t = MetaAdapterFactory.getContainmentLink(0x6b3888c1980244d8L, 0x8baff8e6c33ed689L, 0x11400bb790956f20L, 0x11400bb790956f23L, "operand");
    /*package*/ static final SContainmentLink target$C6zp = MetaAdapterFactory.getContainmentLink(0x6b3888c1980244d8L, 0x8baff8e6c33ed689L, 0x28bef6d7551af450L, 0x28bef6d7551af73bL, "target");
    /*package*/ static final SContainmentLink left$UqF2 = MetaAdapterFactory.getContainmentLink(0x6b3888c1980244d8L, 0x8baff8e6c33ed689L, 0x28bef6d7551af595L, 0x28bef6d7551af94fL, "left");
    /*package*/ static final SContainmentLink right$Uro5 = MetaAdapterFactory.getContainmentLink(0x6b3888c1980244d8L, 0x8baff8e6c33ed689L, 0x28bef6d7551af595L, 0x28bef6d7551af952L, "right");
  }
}
