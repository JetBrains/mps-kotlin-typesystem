import java.util.regex.*
import java.util.zip.*
import java.io.*

buildscript {
    repositories {
       mavenCentral()
    }
}

defaultTasks 'assemble'

allprojects {
  apply plugin: 'java'

  repositories {
    mavenLocal()
    mavenCentral()
  }
}

repositories {
  ivy {
      url 'https://teamcity.jetbrains.com/guestAuth/repository/download'
      patternLayout {
        ivy '[module]/[revision]/teamcity-ivy.xml'
        artifact '[module]/[revision]/[artifact].[ext]'
      }
  }
}

configurations {
  junitAnt
  mps
  coderules
}

dependencies {
  // initialize JUnit optional ant task
  junitAnt 'junit:junit:4.8.2'
  junitAnt('org.apache.ant:ant-junit:1.9.2') {
      transitive = false
  }

  // MPS-related stuff declared as project properties
  mps ("org:${mpsBuildConfiguration}:${mpsBuildArtifact}") {
    artifact {
      name = mpsBuildArtifact
      type = "zip"
    }
  }
  coderules ("org:${coderulesBuildConfiguration}:lastFinished")
}

task installMps(type: Copy)  {
  onlyIf {
    ! file('MPS_HOME').exists()
  }

  from zipTree(configurations.mps[0])
  into 'MPS_HOME'

  // Gradle woodoo for unzipping an archive
  eachFile { FileCopyDetails fcp ->
    // copy the contents of the directory named "MPS ${mpsRelease}"
    if (fcp.relativePath.pathString.startsWith("MPS ${mpsRelease}/")) {
      // remap the file to the root
      def segments = fcp.relativePath.segments
      def pathsegments = segments[1..-1] as String[]
      fcp.relativePath = new RelativePath(!fcp.file.isDirectory(), pathsegments)

    } else {
      fcp.exclude()
    }
    // avoid overriding files
    if (fcp.relativePath.getFile(destinationDir).exists()) {
       it.exclude()
    }
  }
  includeEmptyDirs = false
}

task installCoderules(type: Copy) {
  onlyIf {
    ! file('coderules').exists()
  }
  // Here [1] is hardcoded value to avoid specifying we need coderules zip (which has changing name) and not the build build number file
  from zipTree(configurations.coderules[1]) into 'coderules'
}

task deleteMps(type: Delete) {
  delete 'MPS_HOME'
}

task deleteCoderules(type: Delete) {
  delete 'coderules'
}

task setup(dependsOn: [installMps, installCoderules]) {
  doLast {
    println 'Initialized dependencies.'
  }
}

def buildNumber() {
  System.env.BUILD_NUMBER =~ /MPS-([0-9]+)\.([0-9]+).([0-9]+)-([0-9]+)/
}

ant.taskdef(name: 'junit',
            classname: 'org.apache.tools.ant.taskdefs.optional.junit.JUnitTask',
            classpath: configurations.junitAnt.asPath)

ant.importBuild('buildTempAlteration.xml') { antTarget ->
    'mps-kotlin-'+antTarget
}

ant.properties.'mps.ant.log' = "debug"

// ensure 'setup' runs before 'fetchDependencies' and 'declare-mps-tasks'
'mps-kotlin-fetchDependencies' {
  dependsOn {
    'setup'
  }
}

'mps-kotlin-declare-mps-tasks' {
  dependsOn {
    'setup'
  }
}

// ensure 'generate' runs before 'classes' ('generate' is NOT optional)
'mps-kotlin-classes' {
  dependsOn {
    'mps-kotlin-generate'
  }
  mustRunAfter {
    'mps-kotlin-generate'
  }
}


assemble {
  dependsOn {
    [ ':mps-kotlin-assemble' ]
  }
}

clean {
  dependsOn {
    [ ':mps-kotlin-clean', ':mps-kotlin-cleanSources', deleteCoderules ]
  }
  finalizedBy {
     deleteMps
  }
}

check {
  // tests from this target also include model checker invocation, which requires everything to be built
  finalizedBy {
    ':mps-kotlin-check'
  }
}
