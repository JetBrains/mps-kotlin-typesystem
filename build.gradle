repositories {
    mavenCentral()
    mavenLocal()
}

apply plugin: 'java'

defaultTasks 'assemble'

if (!file(mpsLocation).exists() || !file(coderulesLocation).exists()) {
    throw new GradleException("dependencies are missing, please run ./gradlew -b setup.gradle")
}

configurations {
    junitAnt
}

dependencies {
    junitAnt 'org.apache.ant:ant-junit:1.10.+'
}

def buildNumber() {
    System.env.BUILD_NUMBER =~ /MPS-([0-9]+)\.([0-9]+).([0-9]+)-([0-9]+)/
}

ant.taskdef(name: 'junit',
        classname: 'org.apache.tools.ant.taskdefs.optional.junit.JUnitTask',
        classpath: configurations.junitAnt.asPath)

ant.importBuild('build.xml') { antTarget ->
    'mps-kotlin-' + antTarget
}

ant.properties.'mps.ant.log' = "debug"
ant.properties.'mps_home' = mpsLocation
ant.properties.'coderules_home' = coderulesLocation
ant.properties.'ci.build.num' = "${buildNumber().find() ? buildNumber()[0][4] : '9999'}".toString()
ant.properties.'ci.build.tag' = "${buildNumber().find() ? buildNumber()[0][4] : 'SNAPSHOT'}".toString()

// ensure 'generate' runs before 'classes' ('generate' is NOT optional)
'mps-kotlin-classes' {
    dependsOn {
        'mps-kotlin-generate'
    }
    mustRunAfter {
        'mps-kotlin-generate'
    }
}


assemble {
    dependsOn ':mps-kotlin-assemble'
}

task deleteDeps(type: Delete) {
    delete 'deps'
}

clean {
    dependsOn ':mps-kotlin-clean', ':mps-kotlin-cleanSources'
}

check {
    // tests from this target also include model checker invocation, which requires everything to be built
    finalizedBy ':mps-kotlin-check'
}